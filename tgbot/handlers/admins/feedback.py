import re

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery

from tgbot.config import ADMIN_IDS, connect_to_redis
from tgbot.filters.is_ban import IsBanFilter
from tgbot.misc.keyboards import feedback_inline, cancel_inline
from tgbot.misc.states import FeedbackState


async def send_message(message: Message, state: FSMContext):
    for admin in ADMIN_IDS:
        if message.text == "üíª –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏":
            await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return await state.finish()
        elif message.text == "‚ù§ –¢–∞—Ä–∏—Ñ—ã":
            await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return await state.finish()
        elif message.text == "üì® –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å":
            await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return await state.finish()
        elif message.text == "üì® –ß–∞—Ç":
            await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return await state.finish()
        await message.bot.copy_message(chat_id=admin, from_chat_id=message.from_user.id, message_id=message.message_id)
        await message.bot.send_message(admin, f"üî∫üî∫üî∫"
                                              f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}, <b>{message.from_user.first_name}</b>\n"
                                              f"[ID:{message.from_user.id}] –æ—Å—Ç–∞–≤–∏–ª –≤–æ–ø—Ä–æ—Å.", reply_markup=feedback_inline)
    await message.answer("–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞")
    await state.finish()
    redis_pool = await connect_to_redis()
    await redis_pool.set(name='user_id', value=message.from_user.id)


async def feedback_user(call: CallbackQuery):
    await call.bot.send_message(call.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å. "
                                                   "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ –º–µ–¥–∏–∞–≤–ª–æ–∂–µ–Ω–∏–µ: ",
                                reply_markup=cancel_inline)
    await FeedbackState.waiting_for_admin_message.set()


async def feedback_user_state(message: Message, state: FSMContext):
    redis_pool = await connect_to_redis()
    user_id = await redis_pool.get(name='user_id')
    numbers_only = re.sub(r'\D', '', user_id.decode())
    await message.bot.send_message(numbers_only, '–í–∞–º –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ')
    await message.bot.send_message(numbers_only, message.text)
    await message.bot.send_message(message.from_user.id, '–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.')
    await state.finish()


async def cancel_button(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.bot.delete_message(call.from_user.id, call.message.message_id)
    await call.bot.send_message(call.from_user.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


def register_feedback_handlers(dp: Dispatcher):
    dp.register_message_handler(
        send_message, IsBanFilter(),
        state=FeedbackState.waiting_for_message,
    )
    dp.register_callback_query_handler(
        feedback_user, IsBanFilter(), text="feedback_user", state='*'
    )
    dp.register_message_handler(
        feedback_user_state, IsBanFilter(),
        state=FeedbackState.waiting_for_admin_message
    )
    dp.register_callback_query_handler(
        cancel_button, IsBanFilter(), text="cancelbutton", state='*'
    )