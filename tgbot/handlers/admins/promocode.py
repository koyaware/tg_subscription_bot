import re
import time

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message

from tgbot.config import db, days_to_seconds, connect_to_redis, ADMIN_IDS
from tgbot.filters import AdminFilter
from tgbot.filters.is_ban import IsBanFilter
from tgbot.misc.keyboards import cancel_inline
from tgbot.misc.states import PromoCodeState


async def promocode(call: CallbackQuery):
    await call.bot.send_message(call.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —Å–∫–∏–¥–∫–∏: ',
                                reply_markup=cancel_inline)
    await PromoCodeState.code.set()


async def promocode_state(message: Message, state: FSMContext):
    if not db.is_promo_code_used(message.from_user.id, message.text):
        discount = db.get_discount(message.text)
        if discount is not None:
            max_usage = db.apply_promocode(message.text)
            if max_usage is not None:
                db.mark_promo_code_as_used(message.from_user.id, message.text)
                time_sub = int(time.time()) + days_to_seconds(int(discount))
                db.set_time_sub(message.from_user.id, time_sub)
                await message.bot.send_message(message.from_user.id, f'–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ {int(discount)} –¥–Ω–µ–π.')
                for admin in ADMIN_IDS:
                    await message.bot.send_message(admin, f"üìá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥"
                                                          f"\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}, <b>{message.from_user.first_name}</b>\n"
                                                          f"[ID:{message.from_user.id}] —Ç–æ–ª—å–∫–æ —á—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ {int(discount)} –¥–Ω–µ–π.")
                await state.finish()
            else:
                await message.bot.send_message(message.from_user.id, '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏—Å—á–µ—Ä–ø–∞–Ω.')
                await state.finish()
        else:
            await message.bot.send_message(message.from_user.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ discount –æ—à–∏–±–∫–∞!')
            await state.finish()
    else:
        await message.bot.send_message(message.from_user.id, '–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –≤—ã –µ–≥–æ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏.')
        await state.finish()


async def add_promocode(call: CallbackQuery):
    await call.bot.send_message(call.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è —Å–∫–∏–¥–∫–∏:'
                                                         ' \n\n–ü—Ä–∏–º–µ—Ä: NEW123',
                                   reply_markup=cancel_inline)
    await PromoCodeState.add_name.set()


async def add_promocode_state(message: Message, state: FSMContext):
    redis_pool = await connect_to_redis()
    await redis_pool.set(name='code_name', value=message.text)
    await message.bot.send_message(message.from_user.id, '–û—Ç–ª–∏—á–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞: '
                                                         '\n\n–ü—Ä–∏–º–µ—Ä: 7')
    await state.finish()
    await PromoCodeState.add_discount.set()


async def add_discount_state(message: Message, state: FSMContext):
    if message.text.isdecimal():
        redis_pool = await connect_to_redis()
        await redis_pool.set(name='code_discount', value=message.text)
        await message.bot.send_message(message.from_user.id, '–û—Ç–ª–∏—á–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'
                                                             ' –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞: '
                                                             '\n\n–ü—Ä–∏–º–µ—Ä: 10')
        await state.finish()
        await PromoCodeState.add_max_usage.set()
    else:
        await message.bot.send_message(message.from_user.id, '–û—Ç–≤–µ—Ç –¥–æ–ª–∂–Ω–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ!')
        await state.finish()


async def add_max_usage_state(message: Message, state: FSMContext):
    if message.text.isdecimal():
        redis_pool = await connect_to_redis()
        promo_code = await redis_pool.get(name='code_name')
        code_name = str(promo_code).replace("b'", "").replace("'", "")
        discount = await redis_pool.get(name='code_discount')
        code_discount = re.sub(r'\D', '', discount.decode())
        try:
            db.add_promocode(code_name, int(code_discount), int(message.text))
            await message.bot.send_message(message.from_user.id, f'–û—Ç–ª–∏—á–Ω–æ!\n–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: <b>{code_name}</b>'
                                                                 f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –î–Ω–µ–π: <b>{code_discount}</b>'
                                                                 f'\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: <b>{message.text}</b>')
            await state.finish()
        except Exception as e:
            await message.bot.send_message(message.from_user.id, '–¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
            return await state.finish()
    else:
        await message.bot.send_message(message.from_user.id, '–û—Ç–≤–µ—Ç –¥–æ–ª–∂–Ω–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ!')
        await state.finish()


async def delete_promocode(call: CallbackQuery):
    await call.bot.send_message(call.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:'
                                                         ' \n\n–ü—Ä–∏–º–µ—Ä: NEW123',
                                   reply_markup=cancel_inline)
    await PromoCodeState.delete.set()


async def delete_promocode_state(message: Message, state: FSMContext):
    all_promocodes = db.get_all_promocodes()
    if str(message.text) not in all_promocodes:
        await message.bot.send_message(message.from_user.id, '–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
        return await state.finish()
    db.delete_promocode(str(message.text))
    await message.bot.send_message(message.from_user.id, f'–û—Ç–ª–∏—á–Ω–æ! –í—ã —É–¥–∞–ª–∏–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ <b>{message.text}</b>')
    await state.finish()


async def all_promocodes(call: CallbackQuery):
    all_promocodes = db.get_all_promocodes_each()
    if not all_promocodes:
        return await call.bot.send_message(call.from_user.id, "<b>–ù–µ—Ç –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.</b>")
    else:
        for promocode in all_promocodes:
            formatted_promocode_1 = f"–ü—Ä–æ–º–æ–∫–æ–¥: <b>{promocode[0]}</b>"
            formatted_promocode_2 = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: <b>{promocode[1]}</b>"
            formatted_promocode_3 = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: <b>{promocode[2]}</b>"
            await call.bot.send_message(call.from_user.id, f'{formatted_promocode_1}\n{formatted_promocode_2}'
                                                           f'\n{formatted_promocode_3}\n')


def register_promocode(dp: Dispatcher):
    dp.register_callback_query_handler(
        promocode, IsBanFilter(), text='promocode', state='*'
    )
    dp.register_message_handler(
        promocode_state, IsBanFilter(), state=PromoCodeState.code
    )
    dp.register_callback_query_handler(
        add_promocode, AdminFilter(), text='add_promocode',
        state='*'
    )
    dp.register_message_handler(
        add_promocode_state, AdminFilter(),
        state=PromoCodeState.add_name
    )
    dp.register_message_handler(
        add_discount_state, AdminFilter(),
        state=PromoCodeState.add_discount
    )
    dp.register_message_handler(
        add_max_usage_state, AdminFilter(),
        state=PromoCodeState.add_max_usage
    )
    dp.register_callback_query_handler(
        delete_promocode, AdminFilter(), text='delete_promocode',
        state='*'
    )
    dp.register_message_handler(
        delete_promocode_state, AdminFilter(),
        state=PromoCodeState.delete
    )
    dp.register_callback_query_handler(
        all_promocodes, AdminFilter(), text='all_promocodes',
        state='*'
    )