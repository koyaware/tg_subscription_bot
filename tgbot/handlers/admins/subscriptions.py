import time

from aiogram import Dispatcher
from aiogram.types import ContentType, CallbackQuery, PreCheckoutQuery, Message

from tgbot.config import PAYMENT_TOKEN, days_to_seconds, db
from tgbot.filters.is_ban import IsBanFilter
from tgbot.misc.keyboards import submonthmenu_inline, subhalfyear_inline, cancel_inline
from tgbot.misc.states import PromoCodeState


async def sub_month_menu(call: CallbackQuery):
    await call.bot.delete_message(call.from_user.id, call.message.message_id)
    await call.bot.send_message(call.from_user.id, '<b>–ú–µ—Å—è—Ü\n–¶–µ–Ω–∞: 300—Ä\n–°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏: 1 –º–µ—Å—è—Ü</b>\n\n'
                                                   '–í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª/—á–∞—Ç üëá\n<b>- –¢–†–ê–ù–°–§–ï–†-–ú–û–°–¢ –ó–∞–∫–∞–∑—ã</b>',
                                reply_markup=submonthmenu_inline)


async def sub_half_year_menu(call: CallbackQuery):
    await call.bot.delete_message(call.from_user.id, call.message.message_id)
    await call.bot.send_message(call.from_user.id, '<b>–ú–µ—Å—è—Ü\n–¶–µ–Ω–∞: 600—Ä\n–°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏: 6 –º–µ—Å—è—Ü–µ–≤</b>\n\n'
                                                   '–í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª/—á–∞—Ç üëá\n<b>- –¢–†–ê–ù–°–§–ï–†-–ú–û–°–¢ –ó–∞–∫–∞–∑—ã</b>',
                                reply_markup=subhalfyear_inline)


async def promocode(call: CallbackQuery):
    await call.bot.send_message(call.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —Å–∫–∏–¥–∫–∏: ', reply_markup=cancel_inline)
    await PromoCodeState.code.set()


async def promocode_state(message: Message): # TODO –ù–ê–î–û –î–û–î–ï–õ–ê–¢–¨ –≠–¢–£ –ß–ê–°–¢–¨
    if not db.is_promo_code_used(message.from_user.id, message.text):
        discount = db.get_discount(message.text)
        if discount is not None:
            pass



async def sub_month(call: CallbackQuery):
    await call.bot.delete_message(call.from_user.id, call.message.message_id)
    await call.bot.send_invoice(chat_id=call.from_user.id, title="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏",
                           description="–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", payload="month_sub",
                           provider_token=PAYMENT_TOKEN, currency="RUB",
                           start_parameter="test_bot", prices=[{"label": "–†—É–±", "amount": 30000}])


async def sub_half_year(call: CallbackQuery):
    await call.bot.delete_message(call.from_user.id, call.message.message_id)
    await call.bot.send_invoice(chat_id=call.from_user.id, title="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏",
                           description="–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", payload="halfyear_sub",
                           provider_token=PAYMENT_TOKEN, currency="RUB",
                           start_parameter="test_bot", prices=[{"label": "–†—É–±", "amount": 60000}])


async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


async def process_pay(message: Message):
    if message.successful_payment.invoice_payload == "month_sub":
        time_sub = int(time.time()) + days_to_seconds(30)
        db.set_time_sub(message.from_user.id, time_sub)
        await message.bot.send_message(message.from_user.id, "–í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü!\n"
                                                             "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª/—á–∞—Ç üëá\n"
                                                             "<b>- –¢–†–ê–ù–°–§–ï–†-–ú–û–°–¢ –ó–∞–∫–∞–∑—ã</b>\n"
                                                             "https://t.me/+VHuzPV-cvZlkZWQy\n\n"
                                                             "–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É - /start.")
    elif message.successful_payment.invoice_payload == "halfyear_sub":
        time_sub = int(time.time()) + days_to_seconds(180)
        db.set_time_sub(message.from_user.id, time_sub)
        await message.bot.send_message(message.from_user.id, "–í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–ª–≥–æ–¥–∞!"
                                                             "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª/—á–∞—Ç üëá\n"
                                                             "<b>- –¢–†–ê–ù–°–§–ï–†-–ú–û–°–¢ –ó–∞–∫–∞–∑—ã</b>\n"
                                                             "https://t.me/+VHuzPV-cvZlkZWQy\n\n"
                                                             "–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É - /start.")


def register_subscription_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(
        sub_month_menu, IsBanFilter(), text='submonthmenu', state='*'
    )
    dp.register_callback_query_handler(
        sub_half_year_menu, IsBanFilter(), text='subhalfyearmenu', state='*'
    )
    dp.register_callback_query_handler(
        promocode, IsBanFilter(), text='promocode', state='*'
    )
    dp.register_message_handler(
        promocode_state, IsBanFilter(), state=PromoCodeState.code
    )
    dp.register_callback_query_handler(
        sub_month, IsBanFilter(), text="submonth", state='*'
    )
    dp.register_callback_query_handler(
        sub_half_year, IsBanFilter(), text="subhalfyear", state='*'
    )
    dp.register_pre_checkout_query_handler(
        process_pre_checkout_query, IsBanFilter(), state='*'
    )
    dp.register_message_handler(
        process_pay, IsBanFilter(), content_types=ContentType.SUCCESSFUL_PAYMENT, state='*'
    )
