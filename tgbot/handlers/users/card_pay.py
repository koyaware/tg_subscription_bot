import json
import time

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message

from tgbot.config import ADMIN_IDS, connect_to_redis, days_to_seconds, db
from tgbot.filters import AdminFilter
from tgbot.filters.is_ban import IsBanFilter
from tgbot.misc.keyboards import sub_pay_card_sure_inline, sub_success_or_ban_inline, \
    sub_link_inline, sub_pay_month_card_inline, sub_pay_three_month_card_inline, sub_pay_half_year_card_inline
from tgbot.misc.states import SubPayCardState


async def sub_pay_month_card(call: CallbackQuery):
    await call.message.bot.edit_message_text('–¢–∞—Ä–∏—Ñ: <b>–ú–µ—Å—è—Ü</b>\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:'
                                             ' <b>–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n–°—É–º–º–∞ –∫ –æ—Ç–ø–ª–∞—Ç–µ: <b>150‚ÇΩ.</b>'
                                             '\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ:\n–¢–∏–Ω–∫–æ–≤ <code>89124436363</code>'
                                             '\n–°–∫—Ä–∏–Ω —á–µ–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É, –ª–∏–±–æ —Å—é–¥–∞ –∂–µ –≤ –±–æ—Ç–∞',
                                             call.message.chat.id, call.message.message_id,
                                             reply_markup=sub_pay_month_card_inline)


async def sub_pay_three_month_card(call: CallbackQuery):
    await call.message.bot.edit_message_text('–¢–∞—Ä–∏—Ñ: <b>3 –º–µ—Å—è—Ü–∞</b>\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:'
                                             ' <b>–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n–°—É–º–º–∞ –∫ –æ—Ç–ø–ª–∞—Ç–µ: <b>300‚ÇΩ.</b>'
                                             '\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ:\n–¢–∏–Ω–∫–æ–≤ <code>89124436363</code>'
                                             '\n–°–∫—Ä–∏–Ω —á–µ–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É, –ª–∏–±–æ —Å—é–¥–∞ –∂–µ –≤ –±–æ—Ç–∞',
                                             call.message.chat.id, call.message.message_id,
                                             reply_markup=sub_pay_three_month_card_inline)


async def sub_pay_half_year_card(call: CallbackQuery):
    await call.message.bot.edit_message_text('–¢–∞—Ä–∏—Ñ: <b>–ü–æ–ª–≥–æ–¥–∞</b>\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:'
                                             ' <b>–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n–°—É–º–º–∞ –∫ –æ—Ç–ø–ª–∞—Ç–µ: <b>550‚ÇΩ.</b>'
                                             '\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ:\n–¢–∏–Ω–∫–æ–≤ <code>89124436363</code>'
                                             '\n–°–∫—Ä–∏–Ω —á–µ–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É, –ª–∏–±–æ —Å—é–¥–∞ –∂–µ –≤ –±–æ—Ç–∞',
                                             call.message.chat.id, call.message.message_id,
                                             reply_markup=sub_pay_half_year_card_inline)


async def sub_pay_month_card_sure(call: CallbackQuery):
    for admin in ADMIN_IDS:
        await call.bot.send_message(admin, f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{call.from_user.username}, "
                                           f"<b>{call.from_user.first_name}</b>\n"
                                           f"[ID:{call.from_user.id}] –≤—ã–∑–≤–∞–ª –æ–ø–ª–∞—Ç—É —Ç–∞—Ä–∏—Ñ–∞: "
                                           f"<b>–ú–µ—Å—è—Ü</b>\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: "
                                           f"<b>150‚ÇΩ.</b>\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: <b>–ü–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π "
                                           f"[–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞]</b>")
    await call.bot.edit_message_text('üí∞ <b>–û–ø–ª–∞—Ç–∏–ª–∏?</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–≤–∏–Ω—Ç–∞—Ü–∏—é –æ–± '
                                     '–æ–ø–ª–∞—Ç–µ: <b>—Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ.</b>\n'
                                     '–ù–∞ –∫–≤–∏–Ω—Ç–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–µ—Ç–∫–æ –≤–∏–¥–Ω—ã: <b>'
                                     '–¥–∞—Ç–∞, –≤—Ä–µ–º—è –∏ —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞.</b>\n'
                                     '<code>–ò–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ—á–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–ª–∞—Ç–µ–∂–∞</code>',
                                        call.message.chat.id, call.message.message_id,
                                        reply_markup=sub_pay_card_sure_inline)
    await SubPayCardState.pay_month.set()


async def sub_pay_month_card_state(message: Message, state: FSMContext):
    for admin in ADMIN_IDS:
        if isinstance(message.text, str):
            await message.bot.copy_message(chat_id=admin, from_chat_id=message.from_user.id,
                                           message_id=message.message_id)
            await message.bot.send_message(admin, f"üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É.\n"
                                                  f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}, "
                                                  f"<b>{message.from_user.first_name}</b>\n"
                                                  f"[ID:{message.from_user.id}]\n–¢–∞—Ä–∏—Ñ: <b>–ú–µ—Å—è—Ü</b>\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: "
                                                  f"<b>150‚ÇΩ.</b>\n–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: <b>–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>",
                                           reply_markup=sub_success_or_ban_inline)
        else:
            await message.bot.copy_message(chat_id=admin, from_chat_id=message.from_user.id,
                                           message_id=message.message_id,
                                           caption=f"üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É.\n"
                                                   f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username},"
                                                   f" <b>{message.from_user.first_name}</b>\n"
                                                   f"[ID:{message.from_user.id}]\n–¢–∞—Ä–∏—Ñ: <b>–ú–µ—Å—è—Ü</b>\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: "
                                                   f"<b>150‚ÇΩ.</b>\n–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: <b>–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>"
                                           , reply_markup=sub_success_or_ban_inline)
    await message.bot.send_message(message.from_user.id, '‚úÖ –°–ø–∞—Å–∏–±–æ! –ö–≤–∏—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ '
                                                         '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –µ—ë –ø—Ä–æ–≤–µ—Ä—è—Ç.')
    await state.finish()
    redis_pool = await connect_to_redis()
    user_data = {
        'first_name': message.from_user.first_name,
        'user_id': message.from_user.id,
        'username': message.from_user.username,
        'season': '–º–µ—Å—è—Ü',
        'exact_time': '30'
    }
    user_data_str = json.dumps(user_data)
    await redis_pool.set(name='user_data', value=user_data_str)


async def sub_pay_three_month_card_sure(call: CallbackQuery):
    for admin in ADMIN_IDS:
        await call.bot.send_message(admin, f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{call.from_user.username}, "
                                           f"<b>{call.from_user.first_name}</b>\n"
                                           f"[ID:{call.from_user.id}] –≤—ã–∑–≤–∞–ª –æ–ø–ª–∞—Ç—É —Ç–∞—Ä–∏—Ñ–∞: "
                                           f"<b>3 –º–µ—Å—è—Ü–∞.</b>\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: "
                                           f"<b>300‚ÇΩ.</b>\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: <b>–ü–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π "
                                           f"[–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞]</b>")
    await call.bot.edit_message_text('üí∞ <b>–û–ø–ª–∞—Ç–∏–ª–∏?</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–≤–∏–Ω—Ç–∞—Ü–∏—é –æ–± '
                                     '–æ–ø–ª–∞—Ç–µ: <b>—Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ.</b>\n'
                                     '–ù–∞ –∫–≤–∏–Ω—Ç–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–µ—Ç–∫–æ –≤–∏–¥–Ω—ã: <b>'
                                     '–¥–∞—Ç–∞, –≤—Ä–µ–º—è –∏ —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞.</b>\n'
                                     '<code>–ò–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ—á–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–ª–∞—Ç–µ–∂–∞</code>',
                                        call.message.chat.id, call.message.message_id,
                                        reply_markup=sub_pay_card_sure_inline)
    await SubPayCardState.pay_three_month.set()


async def sub_pay_three_month_card_state(message: Message, state: FSMContext):
    for admin in ADMIN_IDS:
        if isinstance(message.text, str):
            await message.bot.copy_message(chat_id=admin, from_chat_id=message.from_user.id,
                                           message_id=message.message_id)
            await message.bot.send_message(admin, f"üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É.\n"
                                                  f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}, "
                                                  f"<b>{message.from_user.first_name}</b>\n"
                                                  f"[ID:{message.from_user.id}]\n–¢–∞—Ä–∏—Ñ: <b>3 –º–µ—Å—è—Ü–∞.</b>"
                                                  f"\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: "
                                                  f"<b>300‚ÇΩ.</b>\n–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: <b>–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>",
                                           reply_markup=sub_success_or_ban_inline)
        else:
            await message.bot.copy_message(chat_id=admin, from_chat_id=message.from_user.id,
                                           message_id=message.message_id,
                                           caption=f"üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É.\n"
                                                   f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username},"
                                                   f" <b>{message.from_user.first_name}</b>\n"
                                                   f"[ID:{message.from_user.id}]\n–¢–∞—Ä–∏—Ñ: <b>3 –º–µ—Å—è—Ü–∞.</b>"
                                                   f"\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: "
                                                   f"<b>300‚ÇΩ.</b>\n–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: <b>–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>"
                                           , reply_markup=sub_success_or_ban_inline)
    await message.bot.send_message(message.from_user.id, '‚úÖ –°–ø–∞—Å–∏–±–æ! –ö–≤–∏—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ '
                                                         '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –µ—ë –ø—Ä–æ–≤–µ—Ä—è—Ç.')
    await state.finish()
    redis_pool = await connect_to_redis()
    user_data = {
        'first_name': message.from_user.first_name,
        'user_id': message.from_user.id,
        'username': message.from_user.username,
        'season': '3 –º–µ—Å—è—Ü–∞',
        'exact_time': '90'
    }
    user_data_str = json.dumps(user_data)
    await redis_pool.set(name='user_data', value=user_data_str)


async def sub_pay_half_year_card_sure(call: CallbackQuery):
    for admin in ADMIN_IDS:
        await call.bot.send_message(admin, f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{call.from_user.username}, "
                                           f"<b>{call.from_user.first_name}</b>\n"
                                           f"[ID:{call.from_user.id}] –≤—ã–∑–≤–∞–ª –æ–ø–ª–∞—Ç—É —Ç–∞—Ä–∏—Ñ–∞: "
                                           f"<b>–ü–æ–ª–≥–æ–¥–∞</b>\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: "
                                           f"<b>550‚ÇΩ.</b>\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: <b>–ü–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π "
                                           f"[–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞]</b>")
    await call.bot.edit_message_text('üí∞ <b>–û–ø–ª–∞—Ç–∏–ª–∏?</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–≤–∏–Ω—Ç–∞—Ü–∏—é –æ–± '
                                     '–æ–ø–ª–∞—Ç–µ: <b>—Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ.</b>\n'
                                     '–ù–∞ –∫–≤–∏–Ω—Ç–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–µ—Ç–∫–æ –≤–∏–¥–Ω—ã: <b>'
                                     '–¥–∞—Ç–∞, –≤—Ä–µ–º—è –∏ —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞.</b>\n'
                                     '<code>–ò–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ—á–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–ª–∞—Ç–µ–∂–∞</code>',
                                        call.message.chat.id, call.message.message_id,
                                        reply_markup=sub_pay_card_sure_inline)
    await SubPayCardState.pay_half_year.set()


async def sub_pay_half_year_card_state(message: Message, state: FSMContext):
    for admin in ADMIN_IDS:
        if isinstance(message.text, str):
            await message.bot.copy_message(chat_id=admin, from_chat_id=message.from_user.id,
                                           message_id=message.message_id)
            await message.bot.send_message(admin, f"üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É.\n"
                                                  f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}, "
                                                  f"<b>{message.from_user.first_name}</b>\n"
                                                  f"[ID:{message.from_user.id}]\n–¢–∞—Ä–∏—Ñ: <b>–ü–æ–ª–≥–æ–¥–∞</b>\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: "
                                                  f"<b>550‚ÇΩ.</b>\n–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: <b>–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>",
                                           reply_markup=sub_success_or_ban_inline)
        else:
            await message.bot.copy_message(chat_id=admin, from_chat_id=message.from_user.id,
                                           message_id=message.message_id,
                                           caption=f"üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É.\n"
                                                   f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username},"
                                                   f" <b>{message.from_user.first_name}</b>\n"
                                                   f"[ID:{message.from_user.id}]\n–¢–∞—Ä–∏—Ñ: <b>–ü–æ–ª–≥–æ–¥–∞</b>\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: "
                                                   f"<b>550‚ÇΩ.</b>\n–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: <b>–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>"
                                           , reply_markup=sub_success_or_ban_inline)
    await message.bot.send_message(message.from_user.id, '‚úÖ –°–ø–∞—Å–∏–±–æ! –ö–≤–∏—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ '
                                                         '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –µ—ë –ø—Ä–æ–≤–µ—Ä—è—Ç.')
    await state.finish()
    redis_pool = await connect_to_redis()
    user_data = {
        'first_name': message.from_user.first_name,
        'user_id': message.from_user.id,
        'username': message.from_user.username,
        'season': '–ø–æ–ª–≥–æ–¥–∞',
        'exact_time': '180'
    }
    user_data_str = json.dumps(user_data)
    await redis_pool.set(name='user_data', value=user_data_str)


async def sub_success(call: CallbackQuery):
    redis_pool = await connect_to_redis()
    user_data_str = await redis_pool.get('user_data')
    user_data = json.loads(user_data_str)
    first_name_redis = user_data['first_name']
    username_redis = user_data['username']
    user_id = user_data['user_id']
    season = user_data['season']
    exact_time = user_data['exact_time']
    time_sub = int(time.time()) + days_to_seconds(int(exact_time))
    db.set_time_sub(user_id, time_sub)
    await call.bot.delete_message(call.from_user.id, call.message.message_id)
    await call.bot.send_message(user_id, f"–í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {season}!\n"
                                         f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª/—á–∞—Ç üëá\n"
                                         f"<b>- –¢–†–ê–ù–°–§–ï–†-–ú–û–°–¢ –ó–∞–∫–∞–∑—ã</b>\n"
                                         f"–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É"
                                         f" - /start.", reply_markup=sub_link_inline)
    for admin in ADMIN_IDS:
        await call.bot.send_message(admin, f"üí∞ –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n"
                                           f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username_redis}, <b>{first_name_redis}</b>\n"
                                           f"[ID:{user_id}] —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ñ–æ—Ä–º–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {season}."
                                           f"\n\n–°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏: <b>{exact_time} –¥–Ω–µ–π.</b>")


async def sub_ban(call: CallbackQuery):
    redis_pool = await connect_to_redis()
    user_data_str = await redis_pool.get('user_data')
    user_data = json.loads(user_data_str)
    first_name_redis = user_data['first_name']
    username_redis = user_data['username']
    user_id = user_data['user_id']
    await call.bot.delete_message(call.from_user.id, call.message.message_id)
    await call.bot.send_message(user_id, '‚úñ –í–∞—à–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏—è –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ, '
                                         '–∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –∫ –∞–¥–º–∏–Ω—É!')
    await call.bot.send_message(call.from_user.id, f'‚úñ –ö–≤–∏—Ç–∞–Ω—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username_redis},'
                                                   f' <b>{first_name_redis}</b> –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!')


def register_card_pay(dp: Dispatcher):
    dp.register_callback_query_handler(
        sub_pay_month_card, IsBanFilter(),
        text='submonth',
        state="*",
    )
    dp.register_callback_query_handler(
        sub_pay_three_month_card, IsBanFilter(),
        text='subthreemonth',
        state='*'
    )
    dp.register_callback_query_handler(
        sub_pay_half_year_card, IsBanFilter(),
        text='subhalfyear',
        state='*'
    )
    dp.register_callback_query_handler(
        sub_pay_month_card_sure, IsBanFilter(),
        text='user_paid_month',
        state='*'
    )
    dp.register_message_handler(
        sub_pay_month_card_state, IsBanFilter(),
        state=SubPayCardState.pay_month,
        content_types=["text", "photo", "pinned_message"]
    )
    dp.register_callback_query_handler(
        sub_pay_three_month_card_sure, IsBanFilter(),
        text='user_paid_three_month',
        state='*'
    )
    dp.register_message_handler(
        sub_pay_three_month_card_state, IsBanFilter(),
        state=SubPayCardState.pay_three_month,
        content_types=["text", "photo", "pinned_message"]
    )
    dp.register_callback_query_handler(
        sub_pay_half_year_card_sure, IsBanFilter(),
        text='user_paid_half_year',
        state='*'
    )
    dp.register_message_handler(
        sub_pay_half_year_card_state, IsBanFilter(),
        state=SubPayCardState.pay_half_year,
        content_types=["text", "photo", "pinned_message"]
    )
    dp.register_callback_query_handler(
        sub_success, AdminFilter(),
        text='sub_success',
        state='*'
    )
    dp.register_callback_query_handler(
        sub_ban, AdminFilter(),
        text='sub_ban',
        state='*'
    )