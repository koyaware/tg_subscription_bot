import time

from aiogram import Dispatcher
from aiogram.types import CallbackQuery

from tgbot.config import db
from tgbot.filters.is_ban import IsBanFilter
from tgbot.misc.keyboards import sub_link_private_inline, sub_link_open_inline


async def sub_link_private(call: CallbackQuery):
    if db.get_sub_status(call.from_user.id):
        await call.bot.edit_message_text("<b>–í–∞—à–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞</b> üëá\n\n"
                                         "<code>‚ö† –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤–ª—è–µ—Ç—Å—è –æ—à–∏–±–∫–∞ —Å—Å—ã–ª–∫–∞ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞"
                                         " –∏–ª–∏ —á–∞—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ "
                                         "–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, –ø—Ä–æ—Å—Ç–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç"
                                         " (–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å Telegram)</code>\n\n"
                                         "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
                                         call.message.chat.id, call.message.message_id,
                                         reply_markup=sub_link_private_inline)
    else:
        await call.bot.delete_message(call.from_user.id, call.message.message_id)
        await call.bot.send_message(call.from_user.id, "<b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫!</b>")


async def sub_link_open(call: CallbackQuery):
    if db.get_sub_status(call.from_user.id):
        await call.bot.edit_message_text("‚úÖ –í—Ö–æ–¥ –æ—Ç–∫—Ä—ã—Ç, –≤—Å—Ç—É–ø–∞–π—Ç–µ (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ):",
                                         call.message.chat.id, call.message.message_id,
                                         reply_markup=sub_link_open_inline)
        time.sleep(4)
        await call.bot.edit_message_text("<b>–í–∞—à–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞</b> üëá\n\n"
                                         "<code>‚ö† –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤–ª—è–µ—Ç—Å—è –æ—à–∏–±–∫–∞ —Å—Å—ã–ª–∫–∞ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞"
                                         " –∏–ª–∏ —á–∞—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ "
                                         "–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, –ø—Ä–æ—Å—Ç–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç"
                                         " (–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å Telegram)</code>\n\n"
                                         "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
                                         call.message.chat.id, call.message.message_id,
                                         reply_markup=sub_link_private_inline)
    else:
        await call.bot.delete_message(call.from_user.id, call.message.message_id)
        await call.bot.send_message(call.from_user.id, "<b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫!</b>")


def register_private_link(dp: Dispatcher):
    dp.register_callback_query_handler(
        sub_link_private, IsBanFilter(),
        text='sublink',
        state="*",
    )
    dp.register_callback_query_handler(
        sub_link_open, IsBanFilter(), text='subprivatelink',
        state="*"
    )