from datetime import datetime

from aiogram import Dispatcher
from aiogram.types import Message

from tgbot.config import db, BASE_DIR, time_sub_day
from tgbot.filters.is_ban import IsBanFilter
from tgbot.misc.commands import Commands
from tgbot.misc.keyboards import main_info, mainMenu, sub_inline_markup, cancel_inline, subMenu
from tgbot.misc.states import FeedbackState
from tgbot.misc.text import start_message


async def user_start(message: Message):
    if (not db.user_exists(message.from_user.id)):
        db.add_user(message.from_user.id, message.from_user.username, message.from_user.full_name, datetime.now())
        await message.bot.send_message(message.from_user.id, text=start_message, reply_markup=main_info)
        with open(BASE_DIR /'contents/info.MP4', 'rb') as gif_file:
            await message.bot.send_animation(message.chat.id, gif_file, reply_markup=mainMenu)
    else:
        if db.get_sub_status(message.from_user.id):
            await message.bot.send_message(message.from_user.id, text=start_message, reply_markup=main_info)
            with open(BASE_DIR / 'contents/info.MP4', 'rb') as gif_file:
                await message.bot.send_animation(message.chat.id, gif_file, reply_markup=subMenu)
        else:
            await message.bot.send_message(message.from_user.id, text=start_message, reply_markup=main_info)
            with open(BASE_DIR /'contents/info.MP4', 'rb') as gif_file:
                await message.bot.send_animation(message.chat.id, gif_file, reply_markup=mainMenu)


async def bot_message(message: Message):
    if message.chat.type == 'private':
        if message.text == 'üíª –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏':
            user_sub = time_sub_day(db.get_time_sub(message.from_user.id))
            if user_sub is False:
                user_sub = "<b>–ù–µ—Ç</b>"
            user_sub = "\n–ü–æ–¥–ø–∏—Å–∫–∞: " + user_sub
            await message.bot.send_message(message.from_user.id, user_sub)
        elif message.text == '‚ù§ –¢–∞—Ä–∏—Ñ—ã':
            await message.bot.send_message(message.from_user.id,
                                   "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –¥–ª—è –≤–∞—Å —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω: ",
                                   reply_markup=sub_inline_markup)
        elif message.text == 'üì® –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å':
            await message.bot.send_message(message.from_user.id, "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏–ª–∏ –ª—é–±—ã–º –¥—Ä—É–≥–∏–º –º–µ–¥–∏–∞–≤–ª–æ–∂–µ–Ω–∏–µ–º: ", reply_markup=cancel_inline)
            await FeedbackState.waiting_for_message.set()
        elif message.text == 'üì® –ß–∞—Ç':
            if db.get_sub_status(message.from_user.id):
                await message.bot.send_message(message.from_user.id, "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª/—á–∞—Ç üëá\n"
                                                                     "<b>- –¢–†–ê–ù–°–§–ï–†-–ú–û–°–¢ –ó–∞–∫–∞–∑—ã</b>\n"
                                                                     "https://t.me/+VHuzPV-cvZlkZWQy")
            else:
                await message.bot.send_message(message.from_user.id, "<b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫!</b>")


def register_user(dp: Dispatcher):
    dp.register_message_handler(
        user_start, IsBanFilter(),
        text=["/start", Commands.come_back.value],
        state="*",
    )
    dp.register_message_handler(
        bot_message, IsBanFilter(), state="*"
    )